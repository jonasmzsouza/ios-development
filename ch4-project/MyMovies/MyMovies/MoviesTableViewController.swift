//
//  MoviesTableViewController.swift
//  MyMovies
//
//  Created by Jonas Muniz on 17/03/21.
//

import UIKit
import CoreData
class MoviesTableViewController: UITableViewController {
    
    // Creating the NSFetchedResultsController object defining that it will be a controller of the Movie entity
    var fetchedResultsController: NSFetchedResultsController<Movie>!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        loadMovies()
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let vc = segue.destination as? ViewController {
            let movie = fetchedResultsController.object(at: tableView.indexPathForSelectedRow!)
            vc.movie = movie
        }
    }
    func loadMovies() {
        
        // The fetchRequest object is responsible for reading CoreData items.
        // Creating a Movie fetchRequest because we want to search for all the movies in the database.
        // The Movie class (generated by CoreData) already has a method that returns its fetchRequest.
        let fetchRequest: NSFetchRequest<Movie> = Movie.fetchRequest()
        
        // Defining that the films will be ordered alphabetically by title.
        let sortDescriptor = NSSortDescriptor(key: "title", ascending: true)
        fetchRequest.sortDescriptors = [sortDescriptor]
        
        // Instantiating fetchedResultsController object.
        // It is necessary to pass the fetchRequest and the CoreData context.
        fetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: context, sectionNameKeyPath: nil, cacheName: nil)
        
        // Defining that this class will be a delegate of fetchedResultsController.
        // This one that will be called when something happens in the context of the films.
        fetchedResultsController.delegate = self
        do {
            // Executing the requisition of movies
            try fetchedResultsController.performFetch()
        } catch {
            print(error.localizedDescription)
        }
    }
    
    // MARK: - Table view data source
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // The films will be present in the fetchedObjects object.
        // Checking if it has movies and it doesn't, it returns 0.
        return fetchedResultsController.fetchedObjects?.count ?? 0
    }
    // This method prepares each cell to present the corresponding film.
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        // Treating the cell as MovieTableViewCell.
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! MovieTableViewCell
        
        // Using fetchedResultsController's object (at:) method to retrieve the movies.
        // With this method, we pass the indexPath of the cell and obtain the film linked to this cell.
        let movie = fetchedResultsController.object(at: indexPath)
        
        // To fill the image, just treat the image attribute as being an Image, because in it we will save the image of the film
        cell.ivMovie.image = movie.image as? UIImage
        cell.lbTitle.text = movie.title
        cell.lbSummary.text = movie.summary
        
        return cell
    }
    
    // Override to support editing the table view.
    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        
        // If the user pressed the delete button
        if editingStyle == .delete {
            
            // Retrieving the film from that cell
            let movie = fetchedResultsController.object(at: indexPath)
            
            // The context has a method for deleting an element
            context.delete(movie)
            do {
                try context.save()
            } catch {
                print(error.localizedDescription)
            }
        }
    }
    
}

// Implementing the NSFetchedResultsControllerDelegate protocol through extensions.
// With that, the class can be delegate from the fetchedResultsControllerDelegate object
extension MoviesTableViewController: NSFetchedResultsControllerDelegate {
    
    // The method below is called whenever a change is made to a movie.
    // When this happens, we will reload the table, so it reloads all the movies and updates their content.
    func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        tableView.reloadData()
    }
}
